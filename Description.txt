Description:

1. Project creates a 3D scene where a special 3D button (green cube) is always present.
Clicking this button adds a new 3D object (a cube) to the scene, while clicking any other object removes it.
This dynamic management is handled via object picking based on a simple ray–sphere intersection test.

2. Project uses OpenGL 3.x with a programmable pipeline.
Vertex and fragment shaders are used to transform the object geometry and apply lighting.

3. Renderer computes a perspective projection and view matrix, and it converts
screen-space mouse coordinates into a world-space ray. This ray is used to detect which object is under the cursor.

4. Application is split into several classes (Renderer, Scene, Object, Button, Shader) that encapsulate responsibilities such as rendering,
scene management, object behavior, and shader management.

5. SDL library is used for window creation and event handling (mouse clicks, quit events)


File and Class Descriptions:

src/main.cpp:
- Initializes SDL and creates an OpenGL window
- Creates a Renderer instance (which sets up projection, view, and shaders)
- Instantiates a Scene object that manages all 3D objects
- Adds a special button object to the scene.
- Contains the main loop that processes SDL events (e.g., mouse clicks), converts screen coordinates to world-space rays, and uses them for object picking.
- Depending on the picked object, it adds new objects or deletes existing ones


src/Renderer.cpp:
- Sets up the OpenGL state (e.g., depth testing, clearing color)
- Loads and manages shaders.

src/Scene.cpp:
- Manages a dynamic collection of objects in the scene.
- Provides methods to add and remove objects.
- Implements object picking by iterating through all objects and checking for intersections with a ray


src/Object.cpp
- Implements the base class for 3D objects
- Implements a basic ray–sphere intersection test for picking.

src/Button.cpp:
- Inherits from the Object class to represent a special 3D button

src/Shader.cpp:
- Implements the Shader class that loads, compiles, and links vertex and fragment shaders


Libraries Used:
- SDL2
- GLM
- GLAD

